== The menu ==

The menu works by measuring the height of the brightness and then
turning off the rectangles for the left and right sides of the menu
in sequence.

Gun states
POINTAT_NOTHING
  Gun is pointed at blackness.
  When brightness is detected, darken group 1 and go to POINTAT_TESTGRP1
POINTAT_TESTGRP1
  Group 1 is black.
  If brightness is not detected, show all groups, freeze Y, and go to POINTAT_GRP1
  Otherwise, show group 1, darken group 2, and go POINTAT_TESTGRP2
POINTAT_TESTGRP2
  Group 2 is black.
  If brightness is not detected, show all groups, freeze Y, and go to POINTAT_GRP2
  Otherwise, show all groups and go to POINTAT_NOTHING
POINTAT_GRP1
  Within Y coordinate
  When brightness is no longer detected or Y has moved far, go to POINTAT_NOTHING
POINTAT_GRP2
  When brightness is no longer detected or Y has moved far, go to POINTAT_NOTHING
POINTAT_NONTARGET
  Gun is pointed at brightness, but it's not one of the targets.
  When brightness is no longer detected, go to POINTAT_NOTHING

== The kernel ==

There are three "kernels", or cycle-timed loops, for reading the
Zapper's photosensor.  They synchronize to the horizontal retrace
period of 113.667 cycles per line, which is valid on Famicom, NTSC
NES, NTSC famiclones, and Dendy-style PAL famiclones (but not the
authentic PAL NES).  Each measures how many scanlines from the start
of the kernel (use sprite 0 to align this) to when the Zapper's
photosensor turns on, as a way of estimating how far down the screen
the barrel is pointed.  In my tests, this vertical position changes
at least as smoothly as the Wii Remote's position.

=== yonoff ===

Port: 2
Return: Y position and height of brightness

This is the most common kernel.  It measures how many scanlines
elapse before the photosensor in the gun on controller port 2 turns
on and how many before it turns back off.

An empty controller port or standard controller will have zero off
time and a maximum on time.  A Zapper plugged in but not pointed at
brightness will have maximum on time and zero off time.  When a
Zapper is pointed at brightness, the on time may range from 4 to 28
depending on the brightness of the area in front of the barrel.

=== yon2p ===

Ports: 1 and 2
Return: Two Y positions

This kernel measures how many scanlines before the photosensor in
the gun on each of the two controller ports turns on.  This kernel
does not measure on time, but an unplugged gun can be detected with
a zero off time that stays zero even during vertical blank.

=== xyon ===

Port: 2
Return: X and Y position

This was an attempt to measure down to an 18-pixel level at what
point across the screen the photosensor on the gun in controller port
2 turns on.  On some emulators, it works as advertised, but on an
actual NES and TV, there are several dozen pixels of noise added.
So it's probably only good for detecting left, middle, or right,
not for (say) lobbing a grenade at the point where the player shot.

== Color calibration ==

Brightnesses 0 through 8 in the user interface are translated into
NES colors:
Color 1 is (((bright - 0) << 3) & 0xF0) | hue
Color 2 is (((bright - 1) << 3) & 0xF0) | hue

For example:
bright 0 hue 3 is $03 and $F3 (becomes $0F)
bright 5 hue 5 is $25 and $25
bright 8 hue 7 is $47 (becomes $30) and $37

Values $40 and up saturate at white ($30); negative colors ($Fx)
saturate at black ($0F).

On my TV, brightnesses 5 and 7 of any hue (NES colors $2x and $3x)
reliably turn on the photosensor.  On brightness 3 ($1x), it appears
hues 6 (red) through 8 (brown/yellow) are the weakest.

== Collision response between ball and paddle ==

The ball in ZapPing can collide with only one paddle at once, based
on the sign of the horizontal component of the velocity.  If it is
going to the right, it will be tested against only the right player's
paddle; if to the left, against the left player's.  It actually moves
the ball twice each frame and checks for collision twice so that the
ball does not move through the paddle even at speeds up to 20 pixels
per frame.

The collision code divides the paddle into three segments: a
semicircle at the top with the same radius as the ball, a rectangle,
and another semicircle at the bottom.  After trivial rejection with
the bounding boxes of the ball and paddle, the ball's vertical
position determines which section is tested against.  Tests against
the rectangle are easy; tests against the semicircles result in
collision if the sum of squares of X and Y distances are less than
the square of the sum of the radii of the semicircle and ball.

Now as for collision response:  Let Tau be the number of radians in a
circle, or twice Pi.
<http://tauday.com/>

Let one angle unit, symbol b, represent Tau/32 radians or 11.25
degrees.
<http://en.wikipedia.org/wiki/Binary_scaling#Binary_angles>

    v------- 6b
  ,---.
 /   ,'\  <- 5b
|---o---|
|       | <- 4b
|       |

A ball hitting the rectangular flat part of the paddle bounces at
between b and 4b (up to 45 degrees up) depending on the distance from
dead center.  (A ball hitting dead center will intentionally not
bounce at dead center because that would make the game too easy.)
A ball hitting the 45 degrees at the front of each semicircle bounces
at 5b; a ball hitting the rest of the semicircle bounces at 6b.
Cosine and sine values of this angle are pulled from a sine lookup
table and multiplied by the current game speed giving the ball's
velocity.

After each bounce, the speed increases: by 1/32 of the peak speed if
the current speed is less than the peak speed seen during the game,
or by 1/8 pixel per half-frame if the current speed is at peak.

== AI ==

The AI in ZapPing depends on the following equation of a line, which
you may find familiar from high-school geometry:

  y = mx + b

In this equation:

* y is vertical position
* m is the slope of a line
* x is the horizontal displacement from the origin
* b is the value of y when x is 0

The slope of a line between two points is the rise, or vertical part
of the displacement between the points, divided by the run, or
horizontal part.  A velocity vector in 2-space has a slope too; in
fact, a vector can be fully defined by its slope and its speed.
The computer opponent code in ZapPing uses the slope of the velocity
vector to determine where the ball is headed, and it calculates thus:

1. Reflect the vector into the first quadrant
2. Shift the horizontal part of the velocity right until it is below
   256, and count the shifts
3. Shift the vertical part of the speed right until it is less than
   the horizontal part, and count the shifts
4. Divide the shifted vertical part by the shifted horizontal part
   in 0.8 fixed point, giving a shifted slope
5. Multiply this shifted slope by the horizontal part of the distance
   from the ball to the paddle, giving 2^s*mx
6. Shift the result right by
   8 + (number of horizontal shifts) - (number of vertical shifts)
   giving the absolute displacement |mx|
7. Reflect the displacement based on the sign of the vertical part,
   giving the displacement mx
8. Add the current vertical displacement of the ball, giving the
   end displacement mx+b
9. Reflect against the walls, giving a predicted destination

This would be a lot easier on a PC with an FPU or even on a
smartphone with software floating-point arithmetic, but on a machine
with an 8-bit 6502 family CPU, we don't have such luxuries.  Still,
in a way, the accumulated shift count to get the components in range
for the division is not unlike the exponent in software FP.
<http://en.wikipedia.org/wiki/Binary_scaling>

The paddle moves toward the prediction.  I didn't want the paddle to
"teleport" atop the prediction but instead move as if a player were
moving the paddle using a controller.  So I used the upper 8 bits of
the paddle's velocity to look up approximate braking distances in a
lookup table.  So every frame, it compares the predicted ball
position to the predicted paddle position.  If the predictions differ
by more than a fourth of a paddle length, the AI moves the paddle
toward the ball.

